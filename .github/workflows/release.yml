name: SSH Deploy

on:
  push:
    branches:
      - release  # Defina a branch na qual deseja acionar o deploy

env:
  AWS_REGION: us-east-1
  SERVER_ADDRESS: tools.s4sbr.com
  SERVICE_NAME: screen
  SERVICE_PORT: 8082
  ENVIRONMENT_BUCKET_NAME: saudehd-environments
  ENVIRONMENT: tools
  DOCKER_NETWORK: tools

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ secrets.RELEASE_SSH_PRIVATE_KEY }}

    - name: Set ECR_REPOSITORY
      run: |
        # Concatenar variáveis e definir uma nova variável
        ECR_REPOSITORY="ecr-tools-${SERVICE_NAME}"
        echo "ECR_REPOSITORY=${ECR_REPOSITORY}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Connect to SSH and deploy
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
          ssh -o StrictHostKeyChecking=no -i $SSH_AUTH_SOCK root@$SERVER_ADDRESS 'bash -s' << 'ENDSSH'
            aws ecr get-login-password --region ${{env.AWS_REGION}} | docker login --username AWS --password-stdin ${{env.ECR_REGISTRY}}
            docker rmi -f ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}
            docker rm -f ${{env.SERVICE_NAME}}
            docker run --name ${{env.SERVICE_NAME}} -d -p ${{env.SERVICE_PORT}}:80 --network ${{env.DOCKER_NETWORK}} ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}
          ENDSSH
      